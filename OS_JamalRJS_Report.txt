 Student Name: Shaik Jamal Basha
 ID: 11804755
 Roll No.: RK18TM
 Ques. No. Assigned: 8 , 19 
 Email Address: Jamalrjs12@gmail.com 
 GitHub Link: https://github.com/Jamalrjs/Jamal-rj 

Explain the problem in terms of operating system concept (200 w max)
  Question no : 8
  Description :- In this problem we got processes in round robin method , given arrived time , Priority values
                        based on these both process should proceed further in CPU scheduling takes place . Quantum
                        time is 2 , after the process completes one quntum it checks priority at that time of arrival 
                        and then proceeds further . After complection of process it terminates . Program calculates 
                        Waiting Time (WT), Turn Around Time(TAT) , Priority ,  Arrival Time (AT).
  Question no : 19
  Description :-  In the given problem of 10 students are purchasing the gift and returning to gift counter.The accountant
                       gives the preference to that student who has maximum number of gifts. If we talk about this problem in 
                       Operating System concept, In priority scheduling algorithm, a priority is associated with each process and 
                       CPU is allocated to the process with the highest priority. If two processes have with each process and 
                       with each process and  will be execute in first come first serve order.
       

                       CODE FOR 8



                       
#include<stdio.h>
#include<conio.h>
int main()
 {
   int x,n,p[10],pp[10],bt[10],w[10],t[10],awt,atat,i,at[10],tq;
 
   //n is number of process
   //p is process
   //pp is process priority
   //bt is process burst time
   //w is wait time
   // t is turnaround time
   //awt is average waiting time
   //atat is average turnaround time
   //at is arrival time
   //tq is time qunatum
 
 
   printf("Enter the number of process : ");
   scanf("%d",&n);
   printf("Enter time quantum");
   scanf("%d",&tq);
   printf("\n\t Enter burst time : time priorities : Arrival time  \n");
 
   for(i=0;i<n;i++)
    {
      //cout<<"\nProcess["<<i+1<<"]:";
      printf("\n Process %d ",i+1);
      //cin>>bt[i]>>pp[i]>>at[i];
      scanf("%d %d %d",&bt[i],&pp[i],&at[i]);
	  p[i]=i+1;
    }
 
//sorting on the basis of priority
int j;
  for(i=0;i<n-1;i++)
   {
     for(j=i+1;j<n;j++)
     {
       if(pp[i]<pp[j])
       {
     x=pp[i];
     pp[i]=pp[j];
     pp[j]=x;
     x=bt[i];
     bt[i]=bt[j];
     bt[j]=x;
     x=p[i];
     p[i]=p[j];
     p[j]=x;
      }
      //gc[i]=p[j];
   }
}
w[0]=0;
awt=0;
t[0]=bt[0];
atat=t[0];
for(i=1;i<n;i++)
 {
 	if(tq<n || tq>n) {
	 
   w[i]=t[i-1];
   awt+=w[i];
   t[i]=w[i]+bt[i];
   atat+=t[i];
	 }
 }
 
 //Gantt chrat
 printf("\n");
 printf("Gantt chart\n");
 for(i=0;i<n;i++)
 {
 	printf("P %d ",p[i]);
 }
//Displaying the process
 
printf("\n\nProcess \t Burst Time \t Wait Time \t Turn Around Time   Priority \tArrival time \n");
for(i=0;i<n;i++){
printf("\n  %d",p[i]); printf("\t\t %d",bt[i]); printf("\t\t %d",w[i]); printf("\t\t %d",t[i]); printf("\t\t %d",pp[i]); printf("\t\t %d",at[i]);

}
awt/=n;
atat/=n;
printf("\n Average Wait Time : %d ",awt);
printf("\n Average Turn Around Time : %d",atat);
getch();
}


                       CODE 19


#include<stdio.h>

struct student{
	int no_of_gift;
	int at;
	int id;
}s[10];

void sort_arival(){
	struct student a;
	int min,pos;
	for(int i=0;i<10;i++){
		min = s[i].at;
		pos = i;	
		for(int j=i+1;j<10;j++){
			if(min>s[j].at){
				min = s[j].at;
				pos = j;
			}
		}
		
		if(i!=pos){
			a=s[i];
			s[i]=s[pos];
			s[pos]=a;
		}
	}
}

int main(){
	for(int i=0;i<10;i++){
		s[i].id=i+1;
		printf("\nEnter the arrival time for s%d: ",i+1);
		scanf("%d",&s[i].at);
		printf("\nEnter the number of gift items for s%d: ",i+1);
		scanf("%d",&s[i].no_of_gift);
	}
	
	sort_arival();
	
	struct student m;
	int pos;
	
	for(int i=0;i<10;i++){
		m = s[i];
		pos = i;
		for(int j=i+1;j<10;j++){
			if(m.no_of_gift<s[j].no_of_gift){
				m = s[j];
				pos = j;
			}
		}
		s[pos]=s[i];
		s[i]=m;
		printf("\nBill turn for student s%d having %d items",s[i].id,s[i].no_of_gift);
	}
	
	return 0;
}

2. Write the algorithm for proposed solution of the assigned problem.
Problem 1 doesn’t require any algorithm to implement.
I have used Bubble Sort algorithm in Problem 2 to sort the processes in descending order based on the
arrival time of processes and updated there priority and sorted the order of process based on there
current priority


3. Calculate complexity of implemented algorithm. (Student must specify complexity of
each line of code along with overall complexity)


Step 1: Compare the first and the second element of the list and swap
them if they are in wrong order. O(n)
Step 2: Compare the second and the third element of the list and swap
them if they are in wrong order.
O(n)
Step 3: Proceed till the last element of the list in a similar fashion.
Step 4: Repeat all of the above steps until the list is sorted.
The complexity of bubble sort is O(n2
) in both worst and average cases,
because the entire array needs to be iterated for every element



4. Explain all the constraints given in the problem. Attach the code snippet of the
implemented constraint.
PROBLEM 1: For  no snippet

Problem 2: In this problems, we are given constraint of 10 students. Whereas I applied a constraint of
gifts a student can purchase, i.e. 1 <= gift <50
This implies that one has to buy at least 1 gift or no student can buy more than 49 gifts.



5. If you have implemented any additional algorithm to support the solution, explain the
need and usage of the same.
(Bubble Sort)
Bubble sort is (provably) the fastest sort available under a very specific circumstance. It originally
became well known primarily because it was one of the first algorithms (of any kind) that was
rigorously analyzed, and the proof was found that it was optimal under its limited circumstance.


1. begin BubbleSort(list)
2. for all elements of list
3. if list[i] > list[i+1]
4. swap(list[i], list[i+1])
5. end if
6. end for
7. return list
8.end BubbleSort



6. Explain the boundary conditions of the  implemented code
There are no boundary conditions for given problems.




7. Explain all the test cases applied on the solution of assigned problem.
                Problem 1: This problem doesn’t require any additional test case.
                 We’ll get a different output everytime when we execute the code of this problem.
                 The screenshots of output are attached below.
Enter the number of process : 6
Enter time quantum2

         Enter burst time : time priorities : Arrival time

 Process 1 :  20 : 40 : 0

 Process 2 : 25 : 30 : 25


 Process 3 : 25: 30 : 30


 Process 4 : 15 : 35 : 60


 Process 5 10 : 5 : 100


Process 6 : 10 : 10 :105


Gantt chart :-
                           P 1 P 4 P 3 P 2 P 6 P 5

Process          Burst Time      Wait Time       Turn Around Time   Priority    Arrival time

  1              20              0               20              40              0
  4              15              20              35              35              25
  3              25              35              60              30              30
  2              25              60              85              30              60
  6              10              85              95              10              100
  5              10              95              105             5               105
 Average Wait Time : 49
 Average Turn Around Time : 66

Problem 2: This problem doesn’t require any additional test case. 
We’ll get a different output everytime when we execute the code of this problem.
The screenshots of output are attached below.

Enter the arrival time for s1: 0

Enter the number of gift items for s1: 2

Enter the arrival time for s2: 1

Enter the number of gift items for s2: 2

Enter the arrival time for s3: 2

Enter the number of gift items for s3: 5

Enter the arrival time for s4: 3

Enter the number of gift items for s4: 4

Enter the arrival time for s5: 4

Enter the number of gift items for s5: 1

Enter the arrival time for s6: 2

Enter the number of gift items for s6: 8

Enter the arrival time for s7: 7

Enter the number of gift items for s7: 7

Enter the arrival time for s8: 6

Enter the number of gift items for s8: 5

Enter the arrival time for s9: 2

Enter the number of gift items for s9: 5

Enter the arrival time for s10: 5

Enter the number of gift items for s10: 8

Bill turn for student s6 having 8 items
Bill turn for student s10 having 8 items
Bill turn for student s7 having 7 items
Bill turn for student s9 having 5 items
Bill turn for student s8 having 5 items
Bill turn for student s3 having 5 items
Bill turn for student s4 having 4 items
Bill turn for student s2 having 2 items
Bill turn for student s1 having 2 items
Bill turn for student s5 having 1 items


8 .  Have you made minimum 5 revisions of solution on GitHub?
      GitHub Link: https://github.com/Jamalrjs/Jamal-rj
